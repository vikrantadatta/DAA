#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an edge
struct Edge {
    int u, v, weight;

    // Sorting edges by weight in ascending order
    bool operator<(const Edge& other) const {
        return weight < other.weight;
    }
};

// Disjoint Set (Union-Find) with Path Compression & Union by Rank
class DisjointSet {
    vector<int> parent, rank;
public:
    DisjointSet(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; i++)
            parent[i] = i;  // Initialize each node as its own parent
    }

    int find(int v) {
        if (parent[v] != v)
            parent[v] = find(parent[v]);  // Path compression
        return parent[v];
    }

    bool unionSets(int u, int v) {
        int rootU = find(u);
        int rootV = find(v);

        if (rootU != rootV) {
            if (rank[rootU] > rank[rootV]) {
                parent[rootV] = rootU;
            } else if (rank[rootU] < rank[rootV]) {
                parent[rootU] = rootV;
            } else {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
            return true;
        }
        return false;
    }
};

// Function to find Minimum Cost Spanning Tree using Kruskal's Algorithm
pair<vector<Edge>, int> kruskal(int n, vector<Edge>& edges) {
    sort(edges.begin(), edges.end());  // Sort edges by weight
    DisjointSet ds(n);

    vector<Edge> mst;
    int totalCost = 0;

    for (const Edge& edge : edges) {
        if (ds.unionSets(edge.u, edge.v)) {  // If adding this edge does not form a cycle
            mst.push_back(edge);
            totalCost += edge.weight;
            if (mst.size() == n - 1)  // Stop when MST has (n-1) edges
                break;
        }
    }

    return {mst, totalCost};
}

// Driver function
int main() {
    int n = 4; // Number of vertices
    vector<Edge> edges = {
        {0, 1, 10}, {0, 2, 6}, {0, 3, 5},
        {1, 3, 15}, {2, 3, 4}
    };

    auto [mst, cost] = kruskal(n, edges);

    cout << "Minimum Cost Spanning Tree edges:\n";
    for (const Edge& edge : mst)
        cout << edge.u << " - " << edge.v << " : " << edge.weight << "\n";

    cout << "Total Cost: " << cost << endl;
    return 0;
}
